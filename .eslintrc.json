{
  "parser": "@babel/eslint-parser",
  "env": {
      "es2020": true,
      "browser": true,
      "es6": true
  },
  "extends": [
      "react-app",
      "airbnb",
      "plugin:react/recommended",
      "plugin:jsx-a11y/recommended",
      "plugin:react-redux/recommended",
      "plugin:import/typescript"
  ],
  "parserOptions": {
      "ecmaFeatures": {
          "experimentalObjectRestSpread": true,
          "jsx": true
      },
      "sourceType": "module",
      "allowImportExportEverywhere": false,
      "babelOptions": {
          "configFile": "./babel.config.js"
      }
  },
  "plugins": [
      "react",
      "jsx-a11y",
      "react-redux",
      "simple-import-sort",
      "better-mutation"
  ],
  "rules": {
      /********************** TEMP RULES **********************/
      // "react/jsx-sort-props": [
      //     "error",
      //     {
      //         "callbacksLast": true,
      //         "shorthandLast": true,
      //         "ignoreCase": true,
      //         "noSortAlphabetically": true,
      //         "reservedFirst": true
      //     }
      // ],
      //
      // /* disable relative imports */
      // "no-restricted-imports": [
      //     "error",
      //     {
      //         "patterns": [
      //             "../*"
      //         ]
      //     }
      // ],
      /********************************************************/
      //
      // count eslint errors by type
      //   ./node_modules/.bin/eslint ./src --ext .jsx --ext .js | grep error | awk '{print $NF}' | sort | uniq -c | sort -rn
      // apply autofix
      //   ./node_modules/.bin/eslint ./src --ext .jsx --ext .js --fix
      "no-plusplus": [
          2,
          {
              "allowForLoopAfterthoughts": true
          }
      ],
      "semi": [
          "error",
          "never"
      ],
      "arrow-parens": [
          "error",
          "as-needed"
      ],
      "lines-between-class-members": [
          "error",
          "always",
          {
              "exceptAfterSingleLine": true
          }
      ],
      "prefer-const": [
          "error",
          {
              "destructuring": "all"
          }
      ],
      "quote-props": [
          "error",
          "as-needed"
      ],
      "linebreak-style": "off",
      "import/prefer-default-export": "off",
      "react/jsx-wrap-multilines": [
          "error",
          {
              "declaration": "parens-new-line",
              "assignment": "parens-new-line",
              "return": "parens-new-line",
              "arrow": "parens-new-line",
              "condition": "parens-new-line",
              "logical": "ignore",
              "prop": "ignore"
          }
      ],
      "react/sort-comp": [
          "error",
          {
              "order": [
                  "instance-variables",
                  "lifecycle",
                  "everything-else",
                  "/^handle.+$/",
                  "/^render.+$/",
                  "render"
              ],
              "groups": {
                  "lifecycle": [
                      "displayName",
                      "propTypes",
                      "contextTypes",
                      "childContextTypes",
                      "mixins",
                      "statics",
                      "defaultProps",
                      "constructor",
                      "getDefaultProps",
                      "state",
                      "getInitialState",
                      "getChildContext",
                      "componentWillMount",
                      "UNSAFE_componentWillMount",
                      "componentDidMount",
                      "getDerivedStateFromProps",
                      "componentWillReceiveProps",
                      "UNSAFE_componentWillReceiveProps",
                      "shouldComponentUpdate",
                      "componentWillUpdate",
                      "UNSAFE_componentWillUpdate",
                      "getSnapshotBeforeUpdate",
                      "componentDidUpdate",
                      "componentDidCatch",
                      "componentWillUnmount"
                  ]
              }
          }
      ],
      "simple-import-sort/imports": [
          "error",
          {
              "groups": [
                  // `react` related packages come first.
                  [
                      "^react$",
                      "prop-types"
                  ],
                  // External packages
                  [
                      "^@?\\w"
                  ],
                  // @material-ui
                  [
                      "^@material-ui",
                      "^mass-cloud-react-lib"
                  ],
                  // internal packages
                  [
                      "^components\/",
                      "^(actions|api|assets|consts|enums|locale|model|reducers|redux|routes|service|utils|variables|views)\/"
                  ],
                  // Parent imports. Put `..` last.
                  [
                      "^\\.\\.(?!/?$)",
                      "^\\.\\./?$"
                  ],
                  // Other relative imports. Put same-folder imports and `.` last.
                  [
                      "^\\./(?=.*/)(?!/?$)",
                      "^\\.(?!/?$)",
                      "^\\./?$"
                  ],
                  // Style imports.
                  [
                      "^.+\\.s?css$"
                  ]
              ]
          }
      ],
      "no-multiple-empty-lines": [
          "error",
          {
              "max": 2,
              "maxEOF": 0,
              "maxBOF": 0
          }
      ],
      "function-paren-newline": [
          "error",
          "consistent"
      ],
      "no-unused-vars": [
          "error",
          {
              "vars": "all",
              "args": "none", // TODO: to fix manually (["after-used", "all", "none"])
              "ignoreRestSiblings": true
          }
      ],
      "no-underscore-dangle": [
          "error",
          {
              "allow": [
                  "_env_",
                  "_version",
                  "__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED"
              ]
          }
      ],
      "camelcase": [
          "error",
          {
              "allow": [
                  "^UNSAFE_"
              ]
          }
      ],
      "react/jsx-closing-bracket-location": [
          "error",
          {
              "selfClosing": "line-aligned",
              "nonEmpty": "line-aligned"
          }
      ],
      "no-dupe-class-members": "error",
      "radix": [
          "error",
          "as-needed"
      ],
      "react/jsx-no-bind": [
          "error",
          {
              "ignoreDOMComponents": false,
              "ignoreRefs": false,
              "allowArrowFunctions": false,
              "allowFunctions": false,
              "allowBind": false
          }
      ],
      "object-curly-newline": [
          "error",
          {
              "consistent": true
          }
      ],
      "no-console": [
          "error",
          {
              "allow": [
                  "warn",
                  "error"
              ]
          }
      ],
      "no-bitwise": "error",
      "react/jsx-props-no-spreading": "off",
      "react-redux/prefer-separate-component-file": "off",
      "react/no-danger": "error",
      "jsx-a11y/click-events-have-key-events": "off",
      "global-require": "error",
      "arrow-body-style": "error",
      "operator-linebreak": [
          "error",
          "after",
          {
              "overrides": {
                  "?": "before",
                  ":": "before"
              }
          }
      ],
      "max-len": "off",
      "react/jsx-fragments": "error",
      "prefer-destructuring": "off", // 3:3 votes
      "no-shadow": "off",
      "react/destructuring-assignment": "off",
      "react/no-access-state-in-setstate": "off",
      // TODO:
      "react-redux/mapStateToProps-prefer-selectors": "off", // to fix manually (after refactor to new redux flow)
      "react-redux/mapDispatchToProps-returns-object": "off", // to fix manually (after refactor to new redux flow)
      "react/forbid-prop-types": "off", // to fix manually (after refactor)
      "react/prop-types": "off", // to fix manually (after refactor)
      "react-redux/no-unused-prop-types": "off", // to fix manually (after refactor)
      "react/no-unused-prop-types": "off", // seems that should stay 'off'
      "react/require-default-props": "off", // seems that should stay 'off'
      "react/default-props-match-prop-types": "off", // seems that should stay 'off'
      "no-restricted-globals": "off", // to fix manually (isNaN vs Number.isNaN)
      "react/boolean-prop-naming": "off", // to fix manually (define match rule)
      "import/no-extraneous-dependencies": "off", // to fix manually
      "import/no-cycle": "off", // to fix manually
      "import/no-named-as-default": "off",
      "better-mutation/no-mutating-functions": "off",
      "better-mutation/no-mutating-methods": [
          "error",
          {
              "reducers": [
                  "map",
                  "forEach",
                  "map",
                  "reduce",
                  "for"
              ]
          }
      ],
      "better-mutation/no-mutation": [
          "error",
          {
              "allowThis": true,
              "exceptions": [
                  {
                      "property": "propTypes"
                  },
                  {
                      "property": "defaultProps"
                  }
              ],
              "reducers": [
                  "forEach",
                  "map",
                  "reduce",
                  "for",
                  "filter"
              ]
          }
      ]
  },
  "settings": {
      "import/resolver": {
          "node": {
              "moduleDirectory": [
                  "node_modules",
                  "src/"
              ]
          }
      }
      // // mark 'service/*, 'components/*',.. imports as internal module (for import ordering)
      // "import/internal-regex": "^(service|components|redux|views|utils)\/"
  },
  "overrides": [
      {
          "files": [
              "*.js"
          ],
          "rules": {
              "better-mutation/no-mutation": "off",
              "better-mutation/no-mutating-methods": "off"
          }
      },
      {
        "files": [
          "src/locale/en/*.js"
        ],
        "rules": {
          "sort-keys": [
            "error",
            "asc",
            {
              "natural": false
            }
          ]
        }
      }
  ]
}
